name: Docker CI/CD Pipeline

on:
  workflow_dispatch: {}

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build Docker images
        run: |
          docker compose build
      
      - name: Verify Builds
        run: |
          docker compose up -d
          docker compose ps
          # Wait for services to be up
          sleep 20
          # Check if containers are running
          docker compose ps --format json | grep "running" || exit 1
      
      - name: Run Basic Verification
        run: |
          # Check if frontend is accessible
          curl -f http://localhost:3000 || echo "Frontend not responding"
          # Check if backend health endpoint is accessible
          curl -f http://localhost:5000/health || echo "Backend health check failed"

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy with Docker Compose
        run: |
          docker compose -f docker-compose.yml up -d
          
      - name: Verify Deployment
        run: |
          docker compose ps
          echo "Waiting for services to start..."
          sleep 15
          docker compose logs

  # monitor:
  # name: Monitor
  # needs: deploy
  # runs-on: ubuntu-latest
  # steps:
  #   - name: Checkout Repository
  #     uses: actions/checkout@v3
    
  #   - name: Change to Project Directory
  #     run: cd ./docker-compose-file

  #   - name: Check Services Health
  #     run: |
  #       # Check container status
  #       docker compose -f ./docker-compose.yml ps

  #       # Check resource usage
  #       docker stats --no-stream

  #       # Check logs for any errors
  #       docker compose -f ./docker-compose.yml logs --tail=50
  # monitor:
  #   name: Monitor
  #   needs: deploy
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check Services Health
  #       run: |
  #         # Check container status
  #         docker compose ps
  #         # Check resource usage
  #         docker stats --no-stream
  #         # Check logs for any errors
  #         docker compose logs --tail=50

# # .github/workflows/main.yaml
# name: CI/CD Pipeline

# on:
#   # push:
#   #   branches: [ main ]
#   # pull_request:
#   #   branches: [ main ]
#    workflow_dispatch: {}
# env:
#   DOCKER_REGISTRY: ghcr.io
#   BACKEND_IMAGE: ${{ github.repository }}/backend
#   FRONTEND_IMAGE: ${{ github.repository }}/frontend
#   KUBERNETES_NAMESPACE: production
#   VM_DEPLOY_PATH: /var/www/html

# jobs:
#   test:
#     name: Test
#     runs-on: ubuntu-latest
    
#     services:
#       mongodb:
#         image: mongo:latest
#         ports:
#           - 27017:27017

#     steps:
#       - uses: actions/checkout@v3
      
#       - name: Setup Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '18'
#           cache: 'npm'
          
#       # Backend Tests
#       - name: Install Backend Dependencies
#         run: |
#           cd backend
#           npm ci
          
#       - name: Run Backend Tests
#         run: |
#           cd backend
#           npm run test
#         env:
#           MONGODB_URI: mongodb://localhost:27017/test
#           JWT_SECRET: ${{ secrets.JWT_SECRET }}
        
#       # Frontend Tests
#       - name: Install Frontend Dependencies
#         run: |
#           cd frontend
#           npm ci
          
#       - name: Run Frontend Tests
#         run: |
#           cd frontend
#           npm run test
#         env:
#           VITE_API_URL: http://localhost:5000
          
#       # E2E Tests
#       - name: Run E2E Tests
#         uses: cypress-io/github-action@v5
#         with:
#           working-directory: frontend
#           start: npm run dev
#           wait-on: 'http://localhost:3000'

#   build:
#     name: Build and Push Docker Images
#     needs: test
#     runs-on: ubuntu-latest
    
#     steps:
#       - uses: actions/checkout@v3
      
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2
        
#       - name: Login to GitHub Container Registry
#         uses: docker/login-action@v2
#         with:
#           registry: ${{ env.DOCKER_REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}
          
#       # Build Backend
#       - name: Build and Push Backend
#         uses: docker/build-push-action@v4
#         with:
#           context: ./backend
#           push: true
#           tags: |
#             ${{ env.DOCKER_REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
#             ${{ env.DOCKER_REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
#           cache-from: type=gha
#           cache-to: type=gha,mode=max
#           build-args: |
#             NODE_ENV=production
          
#       # Build Frontend
#       - name: Build and Push Frontend
#         uses: docker/build-push-action@v4
#         with:
#           context: ./frontend
#           push: true
#           tags: |
#             ${{ env.DOCKER_REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
#             ${{ env.DOCKER_REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
#           cache-from: type=gha
#           cache-to: type=gha,mode=max
#           build-args: |
#             VITE_API_URL=${{ secrets.VITE_API_URL }}

#   deploy-vm:
#     name: Deploy to VM
#     needs: build
#     runs-on: ubuntu-latest
    
#     steps:
#       - uses: actions/checkout@v3
      
#       - name: Create SSH key
#         run: |
#           mkdir -p ~/.ssh
#           echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/deploy_key
#           chmod 600 ~/.ssh/deploy_key
          
#       - name: Add VM host to known_hosts
#         run: |
#           ssh-keyscan -p ${{ secrets.VM_PORT }} ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts
          
#       - name: Create .env file
#         run: |
#           echo "DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}" > .env
#           echo "BACKEND_IMAGE=${{ env.BACKEND_IMAGE }}" >> .env
#           echo "FRONTEND_IMAGE=${{ env.FRONTEND_IMAGE }}" >> .env
#           echo "TAG=${{ github.sha }}" >> .env
#           echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env
#           echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
#           echo "NODE_ENV=production" >> .env
#           echo "BACKEND_PORT=5000" >> .env
          
#       - name: Copy files to VM
#         run: |
#           scp -i ~/.ssh/deploy_key -P ${{ secrets.VM_PORT }} \
#             docker-compose.yml .env scripts/deploy-vm.sh \
#             ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:~/
            
#       - name: Deploy to VM
#         run: |
#           ssh -i ~/.ssh/deploy_key -p ${{ secrets.VM_PORT }} ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} \
#             "bash deploy-vm.sh"

#   deploy-k8s:
#     name: Deploy to Kubernetes
#     needs: build
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main' # Only deploy to K8s from main branch
    
#     steps:
#       - uses: actions/checkout@v3
      
#       - name: Install kubectl
#         uses: azure/setup-kubectl@v3
        
#       - name: Configure kubectl
#         uses: azure/k8s-set-context@v3
#         with:
#           method: kubeconfig
#           kubeconfig: ${{ secrets.KUBE_CONFIG }}
          
#       - name: Update Kubernetes manifests
#         run: |
#           sed -i "s|image:.*|image: ${{ env.DOCKER_REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}|" kubernetes/backend-deployment.yaml
#           sed -i "s|image:.*|image: ${{ env.DOCKER_REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}|" kubernetes/frontend-deployment.yaml
          
#       - name: Deploy to Kubernetes
#         run: |
#           kubectl apply -f kubernetes/namespace.yaml
#           kubectl apply -f kubernetes/
          
#       - name: Verify Deployment
#         run: |
#           kubectl rollout status deployment/backend -n ${{ env.KUBERNETES_NAMESPACE }}
#           kubectl rollout status deployment/frontend -n ${{ env.KUBERNETES_NAMESPACE }}

#   monitor:
#     name: Setup Monitoring
#     needs: [deploy-vm, deploy-k8s]
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main'
    
#     steps:
#       - uses: actions/checkout@v3
      
#       - name: Install Helm
#         uses: azure/setup-helm@v3
        
#       - name: Configure kubectl
#         uses: azure/k8s-set-context@v3
#         with:
#           method: kubeconfig
#           kubeconfig: ${{ secrets.KUBE_CONFIG }}
          
#       - name: Deploy Prometheus
#         run: |
#           helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
#           helm repo update
#           helm upgrade --install prometheus prometheus-community/kube-prometheus-stack \
#             --namespace monitoring \
#             --create-namespace \
#             --values monitoring/prometheus-values.yaml
            
#       - name: Deploy Grafana
#         run: |
#           helm repo add grafana https://grafana.github.io/helm-charts
#           helm repo update
#           helm upgrade --install grafana grafana/grafana \
#             --namespace monitoring \
#             --values monitoring/grafana-values.yaml \
#             --set adminPassword=${{ secrets.GRAFANA_ADMIN_PASSWORD }}
            
#       - name: Setup VM Monitoring
#         run: |
#           ssh -i ~/.ssh/deploy_key -p ${{ secrets.VM_PORT }} ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} \
#             "docker run -d \
#             --name node-exporter \
#             --net="host" \
#             --pid="host" \
#             -v "/:/host:ro,rslave" \
#             quay.io/prometheus/node-exporter:latest \
#             --path.rootfs=/host"

#   notify:
#     name: Notify Deployment Status
#     needs: [deploy-vm, deploy-k8s, monitor]
#     runs-on: ubuntu-latest
#     if: always()
    
#     steps:
#       - name: Check Pipeline Status
#         if: ${{ contains(needs.*.result, 'failure') }}
#         run: exit 1
        
#       - name: Notify Slack
#         uses: 8398a7/action-slack@v3
#         with:
#           status: ${{ job.status }}
#           fields: repo,message,commit,author,action,eventName,ref,workflow,took
#         env:
#           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

# name: Node.js CI/CD Pipeline

# on:
#   # push:
#   #   branches: [ main, develop ]
#   # pull_request:
#   #   branches: [ main, develop ]
#   workflow_dispatch: {}

# jobs:
#   test:
#     name: Test
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - name: Setup Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '18.x'
#           cache: 'npm'
#       - name: Install Dependencies
#         run: npm ci
#       - name: Run Tests
#         run: |
#           npm run test
#           npm run lint

#   build:
#     name: Build
#     needs: test
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - name: Setup Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '18.x'
#           cache: 'npm'
#       - name: Install Dependencies
#         run: npm ci
#       - name: Build Application
#         run: npm run build
#       - name: Upload Build Artifacts
#         uses: actions/upload-artifact@v3
#         with:
#           name: build
#           path: build/

#   deploy:
#     name: Deploy
#     needs: build
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main'
#     steps:
#       - name: Download Build Artifacts
#         uses: actions/download-artifact@v3
#         with:
#           name: build
#           path: build
#       - name: Deploy Locally
#         run: |
#           echo "Starting local deployment..."
#           npm run start
#           # Add your local deployment commands here
#           # For example:
#           # pm2 restart your-app
#           # or
#           # docker-compose up -d

#   monitor:
#     name: Monitor
#     needs: deploy
#     runs-on: ubuntu-latest
#     steps:
#       - name: Check Application Health
#         run: |
#           curl -f http://localhost:3000/health || exit 1
#       - name: Monitor Application Logs
#         run: |
#           # Add your local monitoring commands here
#           # For example:
#           # pm2 logs --lines 100
#           # or
#           # docker logs your-container --tail 100
#       - name: Send Notification
#         if: always()
#         run: |
#           echo "Deployment status: ${{ job.status }}"
#           # Add your notification command here if needed